use "../structures/seq";

fun facti(n, p) = if n = 0 then p else facti(n-1, n*p);
fun fact(n) = facti(n, 1);

fun gcd(m, n) = if m=0 then n else gcd(n mod m, m);

fun power(x, k) : real = if k=1 then x else if k mod 2 = 0 then power(x*x, k div 2) else x*power(x*x, k div 2);

fun nextfib(prev, curr : int) = (curr, prev+curr);
fun fibpair n = if n=1 then (0, 1) else nextfib(fibpair(n-1));
local
	fun itfib (n, prev, curr) : int =
		if n=1 then curr else itfib(n-1, curr, prev+curr);
in
	fun fib n = if n=0 then 0 else itfib (n, 0, 1);
end;

local
	fun increase(k, n) =
		if (k+1)*(k+1) > n then k else (k+1)
in
	fun introot n =
		if n=0 then 0 else increase(2 * introot(n div 4), n)
end;

fun GCD(m, n) = if n=m then m
	else if m mod 2 = 0 then
			if n mod 2 = 0 then 2 * GCD(m div 2, n div 2)
				else GCD(m div 2, n)
	else
		if n mod 2 = 0 then GCD(m, n div 2)
			else if m < n then GCD(n div 2 - m div 2, m)
				else GCD(m div 2 - n div 2, n);

fun fraction(n, d) =
	let val com = gcd(d, n)
	in (n div com, d div com) end;

fun sqroot a =
	let val acc = 1.0E~10;
		fun findroot x =
			let val nextx = (a/x + x) / 2.0
			in if abs(a-x*x) < acc
				then nextx else findroot nextx
			end
	in findroot 1.0 end;

fun squares r =
	let
		fun between (x, y) =
			let
				val diff = r - x*x;
				fun above y =
					if y>x then []
					else if y*y<diff then above (y+1)
					else if y*y=diff then (x, y) :: between(x-1, y+1)
					else between(x-1, y)
			in above y end
		val firstx = floor(Math.sqrt(real r))
	in between (firstx, 0) end;


local
	val a = 16807.0 and m = 2147483647.0
in
	fun nextrand seed =
		let val t = a*seed
		in t - m * real(floor(t/m)) end
end;

fun randlist (n, seed, tail) =
	if n=0 then (seed, tail)
	else randlist (n-1, nextrand seed, seed::tail);

(* local val a = 16807.0 and m = 2147483647.0
			fun nextRand seed =
						let val t = a*seed
						in t - m * real(floor(t/m)) end
in
	fun randseq s = Seq.map (secr op/ m)
													(Seq.iterates nextRand (real s))
end; *)

local
	fun ins (x, []) : real list = [x]
		| ins (x, y::ys) =
				if x <= y then x::y::ys
				else y :: ins (x, ys);
in
	fun insort [] = []
		| insort (x::xs) = ins (x, insort xs)
end;

fun quick [] = []
(*	| quick [x] = [x] *)
	| quick (a::bs) =
			let
				fun partition (left, right, []) : real list =
							quick left @ (a :: quick right)
					| partition (left, right, x::xs) =
							if x <= a then partition (x::left, right, xs)
												else partition (left, x::right, xs)
			in
				partition ([], [], bs)
			end;

fun quicker ([], sorted) = sorted
	| quicker (a::bs, sorted) =
			let
				fun partition (left, right, []) : real list =
							quicker (left, a :: quicker (right, sorted))
					| partition (left, right, x::xs) =
							if x <= a then partition (x::left, right, xs)
												else partition (left, x::right, xs)
			in
				partition ([], [], bs)
			end;

fun find (a::bs : real list, i) =
			let
				fun partition (left, right, []) : real =
							let val a_pos = length left + 1
							in
								if a_pos = i then a
								else if a_pos > i then find (left, i)
																		 else find (right, i - a_pos)
							end
					| partition (left, right, x::xs) =
							if x <= a then partition (x::left, right, xs)
												else partition (left, x::right, xs)
			in
				if i > 0 andalso i <= length (a::bs)
					then partition ([], [], bs)
					else 0.0
			end;

fun findrange ([], i, j) = []
	| findrange(a::bs, i, j) =
			let
				fun partition (left, right, []) : real list =
							let val a_pos = length left + 1
							in
								findrange (left, i, Int.min(j, a_pos-1)) @
								(if i <= a_pos andalso j >= a_pos then [a] else []) @
								findrange (right, Int.max(1, i - a_pos), j-a_pos)
							end
					| partition (left, right, x::xs) =
							if x <= a then partition (x::left, right, xs)
												else partition (left, x::right, xs)
			in
				if i > j (* orelse i < 1 orelse j > length (a::bs) *) then []
					else partition ([], [], bs)
			end;

fun merge (xs, []) = xs : real list
	| merge ([], ys) = ys
	| merge ((x::xs), (y::ys)) =
			if x <= y then x :: merge (xs, (y::ys))
								else y :: merge ((x::xs), ys);

fun tmergesort [] = []
	| tmergesort [x] = [x]
	| tmergesort xs	=
			let val k = length xs div 2
			in
				merge (tmergesort (List.take(xs, k)),
						   tmergesort (List.drop(xs, k)))
			end;

fun tmergesort' xs =
			let
				fun sort (0, xs) = ([], xs)
					| sort (1, (x::xs)) = ([x], xs)
					| sort (n, xs) =
							let val (l1, xs1) = sort ((n+1) div 2, xs)
									val (l2, xs2) = sort (n div 2, xs1)
							in
								(merge (l1, l2), xs2)
							end
				val (l, _) = sort (length xs, xs)
			in
				l
			end;

fun mergepairs([l], k) = [l]
	| mergepairs(l1::l2::ls, k) =
			if k mod 2 = 1 then l1::l2::ls
			else mergepairs(merge(l1, l2)::ls, k div 2);

local
	fun sift p = Seq.filter (fn n => n mod p <> 0);
in
	fun sieve (Cons(p, nf)) = Cons(p, fn() => sieve (sift p (nf())))
end;
