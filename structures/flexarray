use "flexarray_sig";
use "bin_tree";

structure Braun =
	struct
		fun sub (Lf, _) = raise Subscript
			| sub (Br (v, t1, t2), k) =
					if k = 1 then v
					else if k mod 2 = 0 then sub (t1, k div 2)
															else sub (t2, k div 2);

		fun update (Lf, k, w) =
					if k = 1 then Br (w, Lf, Lf)
									 else raise Subscript
			| update (Br (v, t1, t2), k, w) =
					if k = 1 then Br (w, t1, t2)
					else if k mod 2 = 0
						then Br (v, update (t1, k div 2, w), t2)
						else Br (v, t1, update (t2, k div 2, w));

		fun delete (Lf, n) = raise Subscript
			| delete (Br (v, t1, t2), n) =
					if n = 1 then Lf
					else if n mod 2 = 0 then Br (v, delete (t1, n div 2), t2)
															else Br (v, t1, delete (t2, n div 2));

		fun loext (Lf, w) = Br (w, Lf, Lf)
			| loext (Br (v, t1, t2), w) = Br (w, loext (t2, v), t1);

		fun lorem Lf = raise Size
			| lorem (Br(_, Lf, Lf)) = Lf
			| lorem (Br(_, t1 as Br(v, _, _), t2)) = Br(v, t2, lorem t1);
	end;

structure Flex : FLEXARRAY =
	struct
		datatype 'a array = Array of 'a tree * int;

		val empty = Array(Lf, 0);

		fun length (Array (_, n)) = n;

		fun sub (Array (t, n), k) =
					if 0 <= k andalso k < n then Braun.sub (t, k+1)
					else raise Subscript;

		fun update (Array (t, n), k, w) =
					if 0 <= k andalso k < n then Array(Braun.update(t, k+1, w), n)
					else raise Subscript;

		fun loext (Array (t, n), w) = Array (Braun.loext(t, w), n+1);

		fun lorem (Array (t, n)) =
					if n > 0 then Array (Braun.lorem t, n-1)
					else raise Size;

		fun hiext (Array (t, n), w) = Array (Braun.update(t, n+1, w), n+1);

		fun hirem (Array (t, n)) =
					if n > 0 then Array (Braun.delete(t, n), n-1)
					else raise Size;
	end;
