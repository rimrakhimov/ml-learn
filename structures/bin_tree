datatype 'a tree = Lf | Br of 'a * 'a tree * 'a tree;

structure Tree =
	struct
		fun size Lf = 0
			| size (Br(v, t1, t2)) = 1 + size t1 + size t2;

		fun depth Lf = 0
			| depth (Br(v, t1, t2)) = 1 + Int.max(depth t1, depth t2);

		fun comptree (k, n) =
					if n = 0 then Lf
									 else Br(k, comptree(2*k, n-1),
															comptree(2*k+1, n-1));

		fun reflect Lf = Lf
			| reflect (Br(v, t1, t2)) = Br(v, reflect t2, reflect t1);

		fun compsame(x, n) =
					if n = 0 then Lf
									 else let val t = compsame(x, n-1)
												in Br(x, t, t) end;

		fun balanced Lf = 0
			| balanced (Br(v, t1, t2)) =
					let val s1 = balanced t1
							val s2 = balanced t2
					in
						if s1 = ~1 orelse s2 = ~1 then ~1
						else if abs(s1-s2) <= 1 then s1+s2+1
																		 else ~1
					end;

		fun isrefl (Lf, Lf) = true
			| isrefl (Br(v1, t11, t12), Br(v2, t21, t22)) =
					v1=v2 andalso isrefl (t11, t22) andalso isrefl (t12, t21)
			| isrefl _ = false

		fun preorder Lf = []
			| preorder (Br(v, t1, t2)) = v :: (preorder t1 @ preorder t2);

		fun preord (Lf, vs) = vs
			| preord (Br(v, t1, t2), vs) = v :: preord (t1, preord (t2, vs));

		fun inorder Lf = []
			| inorder (Br(v, t1, t2)) = inorder t1 @ [v] @ inorder t2;

		fun inord (Lf, vs) = vs
			| inord (Br(v, t1, t2), vs) = inord (t1, v :: inord (t2, vs));

		fun postorder Lf = []
			| postorder (Br(v, t1, t2)) = postorder t1 @ postorder t2 @ [v];

		fun postord (Lf, vs) = vs
			| postord (Br(v, t1, t2), vs) = postord (t1, postord (t2, v :: vs));

		fun balpre [] = Lf
			| balpre (x::xs) =
					let val k = length xs div 2
					in
						Br(x, balpre (List.take (xs, k)), balpre (List.drop (xs, k)))
					end;

		fun balin [] = Lf
			| balin (xs) =
					let val k = length xs div 2
							val y::ys = List.drop (xs, k)
					in
						Br(y, balin (List.take (xs, k)), balin ys)
					end;

		fun balpost xs = reflect (balpre (rev xs));

	end;



