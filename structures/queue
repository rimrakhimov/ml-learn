signature QUEUE =
	sig
		type 'a t							 							(* type of queues *)
		exception E 												(* for errors in hd, deq *)
		val empty  : 'a t 									(* the empty queue *)
		val enq    : 'a t * 'a -> 'a t 			(* add to end *)
		val null   : 'a t -> bool 					(* test for empty queue *)
		val hd     : 'a t -> 'a 						(* return front element *)
		val deq    : 'a t -> 'a t						(* remove from front *)
		val length : 'a t -> int						(* return number of elements *)
(*		val equal  : 'a t * 'a t -> bool		(* equality between queues *) *)
	end;

structure Queue1 =
	struct
		type 'a t = 'a list;
		exception E;

		val empty = [];

		fun enq(q, x) = q @ [x];

		fun null (x::q) = false
			| null _ = true;

		fun hd (x::q) = x
			| hd [] = raise E;

		fun deq(x::q) = q
			| deq [] = raise E;

		val length = List.length;

(*		fun equal (q1, q2) = (q1 = q2); *)
	end;

structure Queue2 =
	struct
		datatype 'a t = empty | enq of 'a t * 'a;
		exception E;

		fun null (enq _) = false
			| null empty = true;

		fun hd (enq(empty, x)) = x
			| hd (enq(q,x)) = hd q
			| hd empty = raise E;

		fun deq (enq(empty, x)) = empty
			| deq (enq(q,x)) = enq(deq q, x)
			| deq empty = raise E;

		fun length (enq(q, x)) = 1 + length q
			| length empty = 0;

(*		fun equal (q1, q2) = (q1 = q2); *)
	end;

structure Queue2a =
	struct
		type 'a t = 'a list;
		exception E;

		val empty = [];

		fun enq(q, x) = x :: q;

		fun null(x::q) = false
			| null [] = true;

		fun hd [x] = x
			| hd (_::q) = hd q
			| hd [] = raise E;

		fun deq [x] = []
			| deq (x::q) = x :: deq q
			| deq [] = raise E;

		val length = List.length;

(*  	fun equal (q1, q2) = (q1 = q2); *)
	end;

structure Queue3 =
	struct
		datatype 'a t = Queue of ('a list * 'a list);
		exception E;

		val empty = Queue([], []);

		fun norm (Queue([], tails)) = Queue(rev tails, [])
			| norm q = q;

		fun enq (Queue(heads, tails), x) = norm(Queue(heads, x::tails));

		fun null (Queue([], [])) = true
			| null _ = false;

		fun hd (Queue(x::_, _)) = x
			| hd (Queue([], _)) = raise E;

		fun deq (Queue(x::heads, tails)) = norm(Queue(heads, tails))
			| deq (Queue([], _)) = raise E;

		fun length (Queue(heads, tails)) =
					List.length heads + List.length tails;

(*		fun equal (Queue(heads1, tails1), Queue(heads2, tails2)) =
					(heads1 @ rev tails1) = (heads2 @ rev tails2); *)
	end;
