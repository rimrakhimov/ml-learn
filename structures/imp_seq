signature IMP_SEQUENCE =
	sig
		type 'a t
		exception Empty
		val empty 			: 'a t
		val cons 				: 'a * (unit -> 'a t) -> 'a t
		val null 				: 'a t -> bool
		val hd 					: 'a t -> 'a
		val tl					:	'a t -> 'a t
		val take				: 'a t * int -> 'a list
(*		val toList			:	'a t -> 'a list
		val fromList		: 'a list -> 'a t *)
		val @				 		: 'a t * 'a t -> 'a t
(*		val interleave	: 'a t * 'a t -> 'a t
		val concat			: 'a t t -> 'a t *)
		val map					: ('a -> 'b) -> 'a t -> 'b t
(*		val filter			: ('a -> bool) -> 'a t -> 'a t *)
		val cycle				: ((unit -> 'a t) -> 'a t) -> 'a t
	end;

structure ImpSeq :> IMP_SEQUENCE =
	struct
		datatype 'a t = Nil
									| Cons of 'a * ('a t) ref
									| Delayed of unit -> 'a t;

		exception Empty;

		fun delay xf = ref (Delayed xf);

		val empty = Nil;

		fun cons (x, xf) = Cons(x, delay xf);

		fun force xp =
					case !xp of
						Delayed f => let val s = f()
												 in xp := s; s end
					| s => s;

		fun null Nil = true
			| null (Cons _) = false;

		fun hd Nil = raise Empty
			| hd (Cons(x, _)) = x;

		fun tl Nil = raise Empty
			| tl (Cons(_, xp)) = force xp;

		fun take (xq, 0) = []
			| take (Nil, n) = []
			| take (Cons(x, xp), n) = x :: take (force xp, n-1);

		fun Nil @ yq = yq
			| (Cons(x, xp)) @ yq =
					Cons(x, delay(fn() => (force xp) @ yq));

		fun map f Nil = Nil
			| map f (Cons(x, xp)) =
					Cons(f x, delay (fn() => map f (force xp)));

		fun cycle seqfn =
					let val knot = ref Nil
					in
						knot := seqfn (fn() => !knot);
						!knot
					end;
	end;
